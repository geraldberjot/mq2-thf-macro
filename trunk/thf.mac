|---------------------------------------------------------------------------------------------------------------------------------------------------|
#TURBO 40

#DEFINE /channel /chat ${channelNumber}

#EVENT	NoHold					"Your spell did not take hold."
#EVENT	Tell					"#1# tells you, '#2#'"
#EVENT	Dead    				"#*#Returning to #*#"
#EVENT	Camp					"It will take #*# seconds to prepare your camp."
#EVENT	Hail					"You say, 'Hail, #1#'"
#EVENT	Task					"Your task #1# has been updated."
#EVENT	Assign					"You have been assigned the task #1#."
#EVENT	Group					"#1# invites you to join a group."
#EVENT 	DraekonVoice 			"You hear the voice of #1# calling to you, 'Come to me young one, we must combine our might to destroy him!'"
#EVENT 	DraekonVoiceEnd	 		"You join your powers with #1#, preventing Draekon from attacking!"
#EVENT 	DraekonNoGrass 			"The world begins to spin as Draekon starts to chant an evil spell pulling you towards him."
#EVENT 	DraekonGrass 			"You escape the power of Draekon's spell"
#EVENT 	DraekonBelly 			"The world begins to spin as Draekon starts to chant a powerful spell pushing you away from him."
#EVENT	EQBC 					"<#1#> #2#"
#EVENT	EQBC 					"[#1#(msg)] #2#"
#EVENT	Follow					"#1# tells Team:#2#, 'Follow #3#'"
#EVENT	Zone					"You have entered #*#"

#INCLUDE thf_includes\Setup.inc

SUB Main
	/declare iniHail 	string 	outer "thf_inis\Hail.ini"
	
	/call thfSetup TRUE
	
	/call setupAdvLootVars "thf_inis\Loot.ini"
	
	/channel THF Macro started for ${Me.CleanName} [${Me.Class}]
	
	:MainLoop	
	/if (${outerDebug}) /echo |- MainLoop ==>

	| If my class is not set, I must not be in game, end the macro.
	/if (!${Bool[${Me.Class}]}) {
		/call endMacro
	} else {
		|- To update MQ2Hud
		/call checkToons
		
		|***********************************************************************************|
		|******************************* Background Functions ******************************|
		|***********************************************************************************|
		/if (${outerActionTaken}) /varset outerActionTaken FALSE
		
		/if (${outerCurrentZone} != ${Zone.ID}) /call check_Zone
		/if (${globalFollowing} && !${outerAssisting}) /call check_Follow
		/call check_Active
		/call check_Combat
		/call check_Idle
		
		| If I'm not holding an item, check Life Support and Instant Buffs.
		/if (!${Bool[${Cursor}]}) {
			| Check if I'm casting
			/if (!${Me.Casting.ID} || ${Me.Casting.ID} && ${Me.Class.ShortName.Equal[BRD]}) {
				| Check LifeSupport
				/if (${lifeSupport.Size} && ${Me.PctHPs} < 100) /call check_lifeSupport
				| Check Instant buffs
				/if (${BuffCheck} && ${InstantBuffs.Size} && ${Me.FreeBuffSlots} > ${MaxBuffs}) /call check_InstantBuffs
			}
		} else {
			/channel I have something on cursor !
		}
		
		/call check_BackgroundEvents
		/doevents
	
		| If I'm not active, call mainFunctions
		/if (!${outerActiveTimer}) {
		
			| check for a pending item exchange
			/if (${swapItemBack} && !${itemExchange_Timer}) /call completePendingExchange

			|******************************************************************************|
			|******************************* Main Functions *******************************|
			|******************************************************************************|
			/declare i int local
			/for i 1 to ${functions.Size}
				/if (${Bool[${functions[${i}]}]}) /call ${functions[${i}]}
			/if (!${outerActionTaken}) /next i
	
			|**********************************************************************************|
			|******************************* Tertiary Functions *******************************|
			|**********************************************************************************|
			
			| MedBreak
			/if (${medBreak}) /call check_MedBreak
			
			| Maintain macro timers
			/if (${timerArray.Size}) /call check_macroTimers
		}
	}

	/if (${outerDebug}) {
		/echo <== MainLoop -|
		/delay 5
	}
	/goto :MainLoop	
	/call endMacro
/RETURN

|---------------------------------------------------------------------------------------------------------------------------------------------------|
|- Background events and functions that are checked even while casting or otherwise considered active.
|---------------------------------------------------------------------------------------------------------------------------------------------------|
|- This function is checked constantly, included events and functions should have minimal character interaction.
|---------------------------------------------------------------------------------------------------------------------------------------------------|
SUB check_BackgroundEvents
	/declare i int local

	/for i 1 to ${macroSetups.Size}
		/if (${Bool[${macroSetups[${i}]}]}) /call ${macroSetups[${i}]}_checkBackgroundEvents
	/next i

/RETURN