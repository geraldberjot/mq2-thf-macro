|----------------------------------------------------------------------------|
|- e3_Macro_Casting.inc v2.1 ( originally designed to work with e3.mac )	-|
|- Written by Conradd of THF from Killians of PEQ												-|
|----------------------------------------------------------------------------|
|- Based off of ideas from spell_routines.inc v2.4							-|
|- Originally Written by Rusty and A_Druid_00.								-|
|----------------------------------------------------------------------------|
|- Contains casting functions for Spells, AAs, Items, and Discs.			-|
|----------------------------------------------------------------------------|



|----------------------------------------------------------------------------------------|
|- e3_Cast																				-|
|----------------------------------------------------------------------------------------|
|- Casting handler for e3.mac.															-|
|- Confirms casting requirements, and relays casting calls to type specific functions.	-|
|----------------------------------------------------------------------------------------|
|- @param targetID: The ID of the spawn you want to cast on.							-|
|- @param castName: The name of the spell you want to cast.								-|
|- @param castType: The type of casting to preform, Spell, item, AA, or disc.			-|
|- @param giveUpTimer: Maximum time to wait for the spell to be ready.					-|
|- @param SubToRun: The name of a custom 'sub' to run while casting.					-|
|----------------------------------------------------------------------------------------|
SUB e3_Cast(int targetID, castName, castType, giveUpTimer, SubToRun)
/if (${Debug}) /echo |- e3_Cast ==>

|--------------------------------------------------------------------Check cursor.
	/if (${Cursor.ID}) {
		/if (${Debug}) /echo |- e3_Cast -| ERROR: Cannot cast while holding [${Cursor}].
	} else {
	
	|-----------------------------------------------------------------Check invis.
		/if (${Me.Invis} && !${castInvis} && ${Me.Class.ShortName.NotEqual[ROG]}) {
			/if (${Debug}) /echo |- e3_Cast -| ERROR: Cannot cast while invisible.
		} else {
			
		|-----------------------------------------------------Reset casting variables.
			/varset no_Cast FALSE
			/varset castReturn X
			
		|-----------------------------------------If following, check leash.	
			/if (${assisting} || !${SpawnCount[pc ${FollowTarget}]} || ${SpawnCount[pc ${FollowTarget}]} && ${Spawn[pc ${FollowTarget}].Distance} < ${LeashLength}  && !${Me.Moving} || ${SpawnCount[pc ${FollowTarget}]} && ${Spawn[pc ${FollowTarget}].Distance} > ${LeashLength} && !${Me.Moving}) {
				
		|----------------------------------------------------------------------------------------------Check conditions, based on castType.
				
			|---------------------------------------------------------------------------------Check spell conditions.
				/if (${castType.Left[3].Equal[gem]}) {
					
				|-----------------------------------------------------------------------------Convert spell name to ID
					/if (${Debug}) /echo |- e3_Cast -|
					/if (!${Int[${castName}]}) /varset castName ${Spell[${castName}].ID}
					
				|--------------------------------------------------------------------------Check that the spell is in your spellbook.
					/if (!${Me.Book[${Spell[${castName}].Name}]}) {
						/if (${Debug}) /echo |- e3_Cast -| ERROR: I do not have [${Spell[${castName}].Name}] in my spellbook.
					} else {
					
					|----------------------------------------------------Check mana.
						/if (${Me.CurrentMana}<${Spell[${castName}].Mana}) {
							/if (${Debug}) /echo |- e3_Cast -| ERROR: Not enough mana to cast [${Spell[${castName}].Name}].
						} else {
						
						|------------------------------------------Check range.
							/if (${Spell[${castName}].MyRange} && ${Spawn[id ${targetID}].Distance} > ${Spell[${castName}].MyRange}) {
								/if (${Debug}) /echo |- e3_Cast -| ERROR: [${Spawn[id ${targetID}].CleanName}] is out of range.
							} else {
							
							|----------------------------------------Check LoS.
								/if (${Spell[${castName}].SpellType.Left[10].NotEqual[Beneficial]} && !${Spawn[id ${targetID}].LineOfSight}) {
									/if (${Debug}) /echo |- e3_Cast -| ERROR: I cannot see [${Spawn[id ${targetID}].CleanName}].
								} else {
								
								|----------------------------------------------------------------Attempt to cast spell.
									/call cast_Spell ${targetID} "${castName}" "${castType.Right[1]}" ${giveUpTimer} ${SubToRun}
								}
							}
						}
					}
					
			|---------------------------------------------------------------------------------Check item conditions.
				} else /if (${castType.Equal[item]}) {
				
				|--------------------------------------------------------------Check for the item in inventory.
					/if (!${FindItemCount[=${castName}]}) {
						/if (${Debug}) /echo |- e3_Cast -| ERROR: I do not have [${castName}] in my inventory.
					} else {
					
					|-----------------------------------------------------Check for an existing item timer.
						/if (${FindItem[=${castName}].Timer} || ${itemTimer_${FindItem[=${castName}].ID}}) {
							/if (${Debug}) /echo |- e3_Cast -| ERROR: My recast timer is not yet met for [${castName}].
							/varset castReturn CAST_NOTREADY
						} else {
						
						|------------------------------------------Check range.
							/if (${Spell[${FindItem[=${castName}].Spell}].MyRange} && ${Spawn[id ${targetID}].Distance} > ${Spell[${FindItem[=${castName}].Spell}].MyRange}) {
								/if (${Debug}) /echo |- e3_Cast -| ERROR: [${Spawn[id ${targetID}].CleanName}] is out of range.
							} else {
							
							|----------------------------------------Check LoS.
								/if (${Spell[${FindItem[=${castName}].Spell}].SpellType.NotEqual[Beneficial]} && !${Spawn[id ${targetID}].LineOfSight}) {
									/if (${Debug}) /echo |- e3_Cast -| ERROR: I cannot see [${Spawn[id ${targetID}].CleanName}].
								} else {

								|---------------------------------------------------------------------Attempt to cast the item.
									/call cast_Item ${targetID} "${castName}" ${giveUpTimer} ${SubToRun}
								}
							}
						}
					}	
					
			|---------------------------------------------------------------------------------Check alt conditions.
				} else /if (${castType.Equal[alt]}) {
				
				|-----------------------------------------------------------------------------Convert AA name to ID
					/if (!${Int[${castName}]}) /varset castName ${Me.AltAbility[${castName}].ID}
					
				|-----------------------------------------------------Check for an existing item timer.
					/if (!${Me.AltAbilityReady[${castName}]} || ${altTimer_${castName}}) {
						/if (${Debug}) /echo |- e3_Cast -| ERROR: My recast timer is not yet met for [${castName}].
						/varset castReturn CAST_NOTREADY
					} else {
					
					|------------------------------------------Check range.
						/if (${Spell[${castName}].MyRange} && ${Spawn[id ${targetID}].Distance} > ${Spell[${castName}].MyRange}) {
							/if (${Debug}) /echo |- e3_Cast -| ERROR: [${Spawn[id ${targetID}].CleanName}] is out of range.
						} else {
			
						|----------------------------------------Check LoS.
							/if (${Spell[${castName}].SpellType.NotEqual[Beneficial]} && !${Spawn[id ${targetID}].LineOfSight}) {
								/if (${Debug}) /echo |- e3_Cast -| ERROR: I cannot see [${Spawn[id ${targetID}].CleanName}].
							} else {
							
							|---------------------------------------------------------------------Attempt to cast the AA.
								/call cast_AltAbility ${targetID} ${castName} ${SubToRun}
							}
						}
					}

			|---------------------------------------------------------------------------------Check disc conditions.		
				} else /if (${castType.Equal[disc]}) {
					
				|--------------------------------------------------------------------------------------------Check for a discipline timer, if it's 0 use the disc.
					/if (${discTimer_${castName.Replace[ ,]}}) {	
						/if (${Debug}) /echo |- e3_Cast -| ERROR: My recast timer is not yet met for [${castName}].
						/varset castReturn CAST_NOTREADY
					} else {
					
				|---------------------------------------------------------------------Attempt to use the disc.
						/call useDisc "${castName}"
					}
					
				|--------------------------------------If castType is not recognized.
				} else {
					/if (${Debug}) /echo |- e3_Cast -| ERROR: [${castType}] is not a recognized castType.
				}
				| This is part of EVENT CAST_NOHOLD, or MISSINGCOMPONENTS, and needs to be finished
				| /if (${no_Cast}) /varset bad_Spells ${bad_Spells}${castName},
			}
		}
	}
	
/if (${Debug}) {
	/echo |- e3_Cast -| castReturn=${castReturn}
	/echo <== e3_Cast -|
}
/RETURN



|--------------------------------------------------------------------------------|
|- cast_Spell																	-|
|--------------------------------------------------------------------------------|
|- Memorizes and casts spells if they are available within the allotted time.	-|
|--------------------------------------------------------------------------------|
|- @param targetID: The ID of the spawn you want to cast on.					-|
|- @param castName: The name of the spell you want to cast.						-|
|- @param spellGem: The # of the gem to memorize the spell to.					-|
|- @param giveUpTimer: Maximum time to wait for the spell to be ready.			-|
|- @param SubToRun: The name of a custom 'sub' to run while casting.			-|
|--------------------------------------------------------------------------------|
SUB cast_Spell(int targetID, castName, int spellGem, timer giveUpTimer, SubToRun)
/if (${Debug}) /echo |- cast_Spell ==>

|-----------------------------------------------------------------------------Wait for spell to be ready.
	:waitToCast
	/if (${Debug}) /echo |- cast_Spell -| :waitToCast
	/if (!${Me.SpellReady[${Spell[${castName}]}]}) {
	
	|----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------Memorize spell.
		/if (!${Me.Gem[${Spell[${castName}]}]} && !${Window[SpellBookWnd].Open} && !${Me.Moving} && ${giveUpTimer} > 5 && !${Cursor.ID} && !${Me.Combat}) {
			
			/if (${spellGem} < 1 || ${spellGem} > 9) {
				/if (${Debug}) /echo [${spellGem}] is out of bounds, skipping.
			} else {
					
				:waitToForget
				/if (${Debug} && !${DebugTimer_WaitToForget}) {
					/echo |- cast_Spell -| wait to forget loop
					/call createTimer DebugTimer_WaitToForget 15
				}
				
				| Forget Spell
				/if (${Bool[${Me.Gem[${spellGem}]}]}) {
					/notify CastSpellWnd CSPW_Spell${Math.Calc[${spellGem} - 1].Int} rightmouseup
					/delay 2
					/goto :waitToForget
				}
				
				/if (${Debug} && !${DebugTimer_Memming}) {
					/echo |- cast_Spell -| Memming [${Spell[${castName}]}] Gem[${spellGem}]
					/call createTimer DebugTimer_Memming 15
				}
				
				| mem spell
				/memspell ${spellGem} "${Spell[${castName}]}"
				/delay 2
				/call backgroundEvents
			}
		}

		/if (${giveUpTimer}) {
			/delay 2
			/call backgroundEvents
			/goto :waitToCast
		} else {
			/if (${Debug}) /echo |- e3_Cast -| ERROR: [${Spell[${castName}].Name}] was not ready within the allotted time.
			/if (${Window[SpellBookWnd].Open}) /stand
			/varset castReturn CAST_NOTREADY
		}
	} else {
|---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------If the spell is ready to cast.
	
	|------------------------------------------------------------------------------Target the spell target.
		/if (${targetID} && ${Target.ID} != ${targetID}) /call TrueTarget ${targetID}
		
	|----------------------------------------------------------------------------------Pause follow.
		/if (${Following} && ${stopToCast} && !${NetAdvPath.Pause}) /squelch /netfollow pause
		
	|--------------------------------------------------------------------------------Pause Twist.
		/if (${Twist.Twisting}) /call pauseTwist
		
	|---------------------------------------------------------------------------------Cast the spell.	
		:cast_Spell
		/if (${Debug}) /echo |- cast_Spell -| Attempting to cast [${Spell[${castName}]}]
		/cast "${Spell[${castName}]}"
		/varset actionTaken TRUE
		
		/if (!${Spell[${castName}].MyCastTime}) {
			/varset castReturn CAST_SUCCESS
		} else {
			/delay 5 ${Me.Casting.ID}
			/call Casting_Events
			/varcalc castEndTime ${Me.Casting.MyCastTime}*10
			
			/if (${Me.Casting.ID}) /call e3_CastingChecks ${If[${SubToRun.NotEqual[NULL]},${SubToRun},]}	
			
		|--------------------------------------------------------------------------------If the spell fizzled or was interrupted, and I still have time, try again.
			/if (${Select[${castReturn},CAST_FIZZLE,CAST_INTERRUPTED,CAST_STUNNED]} && ${giveUpTimer}) {
				/if (${Debug}) /echo |- cast_Spell -| Cast was interrupted, retrying.
				/goto :cast_Spell
			
		|-----------------------------------------------------------------------------------If there was an unexpected error.
			} else /if (${Select[${castReturn},CAST_OUTDOORS,CAST_COMPONENTS,CAST_GROUPONLY]}) {
				/varset no_Cast TRUE
				/varset castReturn CAST_CANCELLED
			}
			
		|-----------------------------------------------------------------reacquire follow, and return twist.
			/if (${Following} && !${assisting} && ${NetAdvPath.State} != 1) /call AquireFollow
			/if (${returnTwist}) /call unpauseTwist
		}
	}

/if (${Debug}) /echo <== cast_Spell -|
/RETURN



|--------------------------------------------------------------------------------|
|- cast_Item																	-|
|--------------------------------------------------------------------------------|
|- Equips and casts items if they are available within the allotted time.		-|
|--------------------------------------------------------------------------------|
|- @param targetID: The ID of the spawn you want to cast on.					-|
|- @param itemName: The name of the item you want to cast.						-|
|- @param itemTimer: The recast timer of the item you want to cast.				-|
|- @param SubToRun: The name of a custom 'sub' to run while casting.			-|
|--------------------------------------------------------------------------------|
SUB cast_Item(int targetID, itemName, itemTimer, SubToRun)
/if (${Debug}) /echo |- cast_Item ==>

|------------------------------------------------------------------------------Target the item target.
	/if (${targetID} && ${Target.ID} != ${targetID}) /call TrueTarget ${targetID}

|---If I'm a bard, and singing, stop twisting.  If I'm casting a spell, wait until I'm done.	
	/if (${Twist.Twisting}) /call pauseTwist
	/if (${Me.Casting.ID}) /delay 100 !${Me.Casting.ID}

|----------------------------------------------------------------------------------Pause follow.
	/if (${Following} && ${stopToCast} && !${NetAdvPath.Pause}) /squelch /netfollow pause
	
|----------------------------------------------------------------------------------Search Potion belt.
	/declare i int local
	
	/for i 0 to 4
	
		/if (${Window[PotionBeltWnd].Child[PW_PotionSlot${i}_Button].Tooltip.Left[${itemName.Length}].Equal[${itemName}]}) {
			/notify PotionBeltWnd PW_PotionSlot${i}_Button rightmouseup
			
			|----------------------------------------------------------------------Check for item timer.
			/if (!${Ini[${itemTimers_Ini},${itemName.Left[1]},${itemName}].Length}) {
				/call WriteToIni "${itemTimers_Ini},${itemName.Left[1]},${itemName}" 0s
				/docommand ${ChatToggle} [${itemName}] has been added to [${itemTimers_Ini}].  Please review this entry to ensure proper casting of items.
			} else {
				/if (${Int[${Ini[${itemTimers_Ini},${itemName.Left[1]},${itemName}]}]}) {
					/call CreateTimer itemTimer_${FindItem[=${itemName}].ID} ${Int[${Ini[${itemTimers_Ini},${itemName.Left[1]},${itemName}]}]}0
					/if (${Debug}) /echo Created itemTimer_${FindItem[=${itemName}].ID} -- ${itemTimer_${FindItem[=${itemName}].ID}}
				}
			}
			
			/goto :castfrom_PotionBelt
		}
		
	/next i
	
|----------------------------------------------------------------------Attempt to cast the item.
	/declare giveUpTimer timer local 2s
	/declare slotName string local NOSWAP
	/declare oldItemName string local
	/declare lagMultiplier string local 0
	/varset swapItemBack FALSE
	
	:cast_Item
	/if (${Debug}) /echo |- cast_Item -| Attempting to cast [${itemName}].

|----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------If the item must be worn to cast, and is not currently equipped.
	/if (${FindItem[${itemName}].WornSlot[1]} && ${FindItem[${itemName}].EffectType.Find[worn]} && ${FindItem[${itemName}].InvSlot}>22) {
		
		/if (${Debug}) /echo |- cast_Item -| This is a worn item.
		/varset slotName ${FindItem[${itemName}].WornSlot[1].Name}
		
	} else /if (${FindItem[${itemName}].EffectType.Find[inventory]} && ${FindItem[${itemName}].InvSlot}>30) {
	
		/if (${Debug}) /echo |- cast_Item -| This is clickable from inventory.
		
		/for i 1 to 8
		
		|-------------------------------------------------------------------If the item in pack slot i is not a container.
			/if (!${InvSlot[pack${i}].Item.Container}) {
				/varset slotName pack${i}
				
		|-----------------------------------------------------------------------If the item in pack slot i is a container.
			} else {
			
			|----------------------------------------------------------------If I have no free pack slots, alert the user.
				/if (${InvSlot[pack8].Item.Container}) {
					/if (${Debug}) /echo |- cast_Item -| I have run out of inventory space and cannot cast [${itemName}].
					/goto :skipCast
				}
			}
			
		/if (${slotName.Equal[NOSWAP]}) /next i
		
	} else {
		
		/if (${Debug}) /echo |- cast_Item -| This has multiple equippable slots.
		/varset slotName ${FindItem[${itemName}].InvSlot.Name}
	}

	/if (${slotName.NotEqual[NOSWAP]} && ${FindItem[${itemName}].InvSlot} != ${InvSlot[${slotName}]}) {

		/if (${InvSlot[${slotName}]} < 23) {
			/varset swapItemBack TRUE
			/varset oldItemName ${InvSlot[${slotName}].Item.Name}
			/call WriteToIni "${MacroData_Ini},PendingExchanges-${MacroQuest.Server},${Me.CleanName}" "${oldItemName}/${slotName}" 1
		}
		
		/call SwapItem "${itemName}" ${slotName}
	}
	
	/cast item "${itemName}"
	:castfrom_PotionBelt
	/varset actionTaken TRUE
	
	/if (!${FindItem[${itemName}].CastTime}) {
		/varset castReturn CAST_SUCCESS
	} else {
	
	|-------------------------------------------------------------Wait to start casting.
		/delay 5 ${Me.Casting.ID}
		/call Casting_Events
		/varcalc castEndTime ${Me.Casting.MyCastTime}*10
		
		/if (${Me.Casting.ID}) /call e3_CastingChecks ${If[${SubToRun.NotEqual[NULL]},${SubToRun},]}
		
	|--------------------------------------------------------------------Check cast return.
		/if (${Select[${castReturn},CAST_FIZZLE,CAST_INTERRUPTED,CAST_STUNNED]} && ${giveUpTimer}) {
			/goto :cast_Item
		} else /if (${Select[${castReturn},CAST_OUTDOORS,CAST_NOHOLD]}) {
			/varset no_Cast TRUE
		} else /if (${Select[${castReturn},CAST_CANCELLED]}) {
			/call interrupt
		}
	}	

|----------------------------------------------------------------------Check for item timer.
	/if (!${Ini[${itemTimers_Ini},${itemName.Left[1]},${itemName}].Length}) {
		/call WriteToIni "${itemTimers_Ini},${itemName.Left[1]},${itemName}" 0s
		/docommand ${ChatToggle} [${itemName}] has been added to [${itemTimers_Ini}].  Please review this entry to ensure proper casting of items.
	} else {
		/if (${Int[${Ini[${itemTimers_Ini},${itemName.Left[1]},${itemName}]}]}) {
			/call CreateTimer itemTimer_${FindItem[=${itemName}].ID} ${Int[${Ini[${itemTimers_Ini},${itemName.Left[1]},${itemName}]}]}0
			/if (${Debug}) /echo Created itemTimer_${FindItem[=${itemName}].ID} -- ${itemTimer_${FindItem[=${itemName}].ID}}
		}
	}

|----------------------------------------------------------------------Create a timer, and set swapBack TRUE.  Swapback will be handled via Background.inc > /call completePendingExchange
	/if (${swapItemBack} && ${FindItem[${oldItemName}].ID}) /varset itemExchange_Timer ${Math.Calc[${MacroQuest.Ping} / 2].Int}

	/if (${Cursor.Name.Equal[${itemName}]}) /call ClearCursor

|-----------------------------------------------------------------reacquire follow, and return twist.
	/if (${Following} && !${assisting} && ${NetAdvPath.State} != 1) /call AquireFollow
	/if (${returnTwist}) /call unpauseTwist
	:skipCast

/if (${Debug}) /echo <== cast_Item -|
/RETURN



|--------------------------------------------------------------------------------|
|- cast_AltAbility																-|
|--------------------------------------------------------------------------------|
|- Casts Alternate Abilities if they are available within the allotted time.	-|
|--------------------------------------------------------------------------------|
|- @param targetID: The ID of the spawn you want to cast on.					-|
|- @param altName: The name of the Alternate Ability you want to cast.			-|
|- @param SubToRun: The name of a custom 'sub' to run while casting.			-|
|--------------------------------------------------------------------------------|
SUB cast_AltAbility(int targetID, altName, SubToRun)
/if (${Debug}) /echo |- cast_AltAbility ==>

|------------------------------------------------------------------------------Target the item target.
	/if (${targetID} && ${Target.ID} != ${targetID}) /call TrueTarget ${targetID}

|----------------------------------------------------------------------------------Pause follow.
	/if (${Following} && ${stopToCast} && !${NetAdvPath.Pause}) /squelch /netfollow pause
	
|--------------------------------------------------------------------------------Pause Twist.
	/if (${Twist.Twisting}) /call pauseTwist
	
|------------------------------------------------If I've just cast an AA, wait a moment before casting another.
	/if (${altRecast_Timer}) /delay 20 !${altRecast_Timer}
	
|----------------------------------------------------------------------Attempt to cast the AA.
	/declare giveUpTimer timer local 20
	
	:cast_Alt
	/if (${Debug}) /echo |- cast_AltAbility -| Attempting to cast [${Me.AltAbility[${altName}].Name}]
	/alt act ${altName}
	/varset actionTaken TRUE
	
	/if (!${Spell[${altName}].CastTime}) {
		/varset castReturn CAST_SUCCESS
	} else {
	
	|-------------------------------------------------------------Wait to start casting.
		/delay 5 ${Me.Casting.ID}
		/call Casting_Events
		/varcalc castEndTime ${Me.Casting.MyCastTime}*10

		/if (${Me.Casting.ID}) /call e3_CastingChecks ${If[${Defined[SubToRun]},${SubToRun},]}
		
		/if (${Select[${castReturn},CAST_FIZZLE,CAST_INTERRUPTED,CAST_STUNNED]} && ${giveUpTimer}) {
			/goto :cast_Alt
		} else /if (${Select[${castReturn},CAST_OUTDOORS,CAST_NOHOLD]}) {
			/varset no_Cast TRUE
		} else /if (${Select[${castReturn},CAST_CANCELLED]}) {
			/call interrupt
		}
	}

	/call CreateTimer altTimer_${Me.AltAbility[${altName}].ID} ${Me.AltAbility[${altName}].ReuseTime}s

|-----------------------------------------------------------------reacquire follow, and return twist.
	/if (${Following} && !${assisting} && ${NetAdvPath.State} != 1) /call AquireFollow
	/if (${returnTwist}) /call unpauseTwist
	/varset altRecast_Timer 20
	
/if (${Debug}) /echo <== cast_AltAbility -|
/RETURN



SUB useDisc(discToUse)
/if (${Debug}) {
	/echo |- useDisc ==>
	/echo |- useDisc -| Attempting to use [${discToUse}]
}
		
	|---If I'm a bard, and singing, stop twisting.  If I'm casting a spell, wait until I'm done.	
		/if (${Twist.Twisting}) /call pauseTwist
		/if ( ${Me.Casting.ID} ) /delay 10s !${Me.Casting.ID}

	|---------------------------------------------------------------------------------Attempt to make a timer for the discipline I'm about to use.
		/if (${Ini[${discTimer_Ini},${Me.Class},${discToUse}].Length}) {
			/call CreateTimer discTimer_${discToUse.Replace[ ,]} ${Ini[${discTimer_Ini},${Me.Class},${discToUse}]}
			/varset discTimer_${discToUse.Replace[ ,]} ${Math.Calc[${discTimer_${discToUse.Replace[ ,]}} + 5]}
		} else /if (!${Ini[${discTimer_Ini},${Me.Class},${discToUse}].Length}) {
			/echo There is no setting recorded for ${discToUse}. Adding ${discToUse} to ${discTimer_Ini}, please update this timer to ensure proper macro functionality.
			/ini ${discTimer_Ini} "${Me.Class}" "${discToUse}" UNKNOWN
		}

		/disc ${discToUse}
		
		/if (${returnTwist}) /call unpauseTwist

/if (${Debug}) /echo |- useDisc ==>	
/RETURN



|------------------------------------|
|- e3_CastingChecks					-|
|------------------------------------|
|- Checks to preform while casting.	-|
|------------------------------------|
SUB e3_CastingChecks
 /if (${Debug}) /echo |- e3_CastingChecks ==>
	
|----------------------------------------------------------------------Declare variables.
	/declare currentTarget int local ${Target.ID}
	/declare currentTargetType string local ${Target.Type}
	/declare cast_locX float local ${Me.X}
	/declare cast_locY float local ${Me.Y}
	
|----------------------------------------------------------------------wait_For_Cast loop.
	:wait_For_Cast
	/if (${Debug} && !${DebugTimer_waitForCast}) {
		/echo |- e3_CastingChecks -| :wait_For_Cast
		/call createTimer DebugTimer_waitForCast 30
	}
	
	/call Casting_Events
	/call backgroundEvents

|------------------------------------------------------------------------------If the caster is ducking, cancel.
	/if (${Me.State.Equal[DUCK]}) {
		/if (${Debug}) /echo |- e3_CastingChecks -| Cast cancelled.
		/varset castReturn CAST_CANCELLED
	}
	
|-----------------------------------------------------------------------------If I'm following, and have fallen behind, aquire follow.
	/if (!${assisting} && ${Following} && ${SpawnCount[pc ${FollowTarget}]} && ${Spawn[${FollowTarget}].Distance} > ${LeashLength} && ${Spawn[${FollowTarget}].Distance} < ${FollowBreakDistance} && !${Me.Moving}) {
		/if (${Debug}) /echo |- e3_CastingChecks -| AquireFollow interrupt.
		/call AquireFollow
		/varset castReturn CAST_CANCELLED
	}
	
|----------------------------------------------------------------------------If the target has moved out of range.
	/if (${Spell[${Me.Casting.ID}].MyRange} && ${Spell[${Me.Casting.ID}].TargetType.NotEqual[Self]} && ${Target.Distance}>${Spell[${Me.Casting.ID}].MyRange}) {
		/if (${Debug}) /echo |- e3_CastingChecks -| Out of range interrupt.
		/call interrupt
		/varset castReturn CAST_CANCELLED
	}
	
|-------------------------------------------------------------------------------------If I've moved, cancel casting.
	/if (${cast_locX}!=${Me.X} || ${cast_locY}!=${Me.Y}) {
		/call Triangulate_Distance ${cast_locY},${cast_locY} ${Me.Loc.Replace[ ,]}
		/if (${Macro.Return}>5) {
			/if (${Debug}) /echo |- e3_CastingChecks -| Caster movement interrupt.
			/call interrupt
			/varset castReturn CAST_INTERRUPTED
		}
	}

|-------------------------------------------------------------------------If I've lost Line of Sight on the target.
	/if (${Spell[${Me.Casting.ID}].SpellType.Equal[Detrimental]} && !${Spawn[id ${Target.ID}].LineOfSight}) {
		/if (${Debug}) /echo |- e3_CastingChecks -| Line of Sight interrupt.
		/call interrupt
		/varset castReturn CAST_CANCELLED
	}
	
|-------------------------------------------------------------------------If the target has died.	
	/if (${Spawn[id ${Target.ID}].Type.Equal[Corpse]} && !${Select[${Spell[${Me.Casting.ID}].TargetType},PB AE,Targeted AE,Corpse]}) {
		/if (${Debug}) /echo |- e3_CastingChecks -| Spawn has died interrupt.
		/call interrupt
		/if (${assisting}) /call AssistOff
		/varset castReturn CAST_CANCELLED
	}

|------------------------------------------------------------------If there is a custom SUB, run it.
	/if (${SubToRun.NotEqual[NULL]}) /call ${SubToRun}
	
	/delay 1
	
	/if (${Me.Casting.ID} && ${castReturn.NotEqual[CAST_CANCELLED]}) /goto :wait_For_Cast
	/call Casting_Events
	
/if (${Debug}) /echo <== e3_CastingChecks -|
/RETURN



SUB SwapItem(itemName,slotName)
/if (${Debug}) /echo |- SwapItem ==>

	/if (${Cursor.ID}) {
		/echo ERROR: |- SwapItem -| SwapItem cannot be preformed while there is an item on your cursor.
	} else {

		/declare startingCount int local ${FindItemCount[${itemName}]}
		/declare retryTimer timer local 50
		
		:try_Again
		
		/if (${Debug}) /echo |- SwapItem -| Attempting to exchange [${itemName}] for [${InvSlot[${slotName}].Item}]
		/exchange "${itemName}" ${slotName}
		/delay 30 ${InvSlot[${slotName}].Item.Name.Equal[${itemName}]} && ${FindItemCount[${itemName}]}==${startingCount}
		/if (${InvSlot[${slotName}].Item.Name.NotEqual[${itemName}]}) {
			/if (${retryTimer}) {
				/goto :try_Again
			} else {
				/if (${Debug}) /echo ERROR: |- SwapItem -| Failed to swap [${InvSlot[${slotName}].Item.Name}] for [${itemName}].
			}
		}
		/delay 5
		/if (${Cursor.ID}) /call ClearCursor
	}

/if (${Debug}) /echo <== SwapItem -|
/RETURN



|----------------------------------------------------------------------------|
|- Handler for long term spells.											-|
|----------------------------------------------------------------------------|
|- Creates timers, and checks the duration of long term detrimental spells.	-|
|----------------------------------------------------------------------------|
SUB Check_LongTermSpell(int SpellTarget, SpellName, CastType, GiveUpTimer, int GiveUpValue)
/if (${Debug}) /echo |- Check_LongTermSpell ==>

|------------------------------Declare variables to store information about the timers being created.
	/declare dot_Timer string local
	/declare timer_Setting string local
	
|-------------------------------Set variables for a spell.
	/if (${CastType.Left[3].Equal[gem]}) {
		/varset dot_Timer ${SpellTarget}_${Spell[${SpellName}].ID}
		/varset timer_Setting ${Math.Calc[${Spell[${SpellName}].Duration}*6-6]}s

|-------------------------------Set variables for an item.
	} else /if (${CastType.Equal[item]}) {
		/varset dot_Timer ${SpellTarget}_${FindItem[${SpellName}].ID}
		/varset timer_Setting ${Math.Calc[${Spell[${FindItem[${SpellName}].Spell}].Duration}*6-6]}s
	
|-------------------------------Set variables for an AA.
	} else /if (${CastType.Left[3].Equal[Alt]}) {
		/varset dot_Timer ${SpellTarget}_${Me.AltAbility[${SpellName}].ID}
		/varset timer_Setting ${Math.Calc[${Spell[${Me.AltAbility[${SpellName}].Spell}].Duration}*6-6]}s
	}
	
|--------------------------------------------Check the duration of the timer of this spell. If it's less than 18 seconds, recast.
	/if (${${dot_Timer}} > 180) {
		/if (${Debug}) /echo |- Check_LongTermSpell -| ${Spawn[id ${SpellTarget}].CleanName}_${SpellName}[${dot_Timer}]= [${${dot_Timer}}]
	} else {
		/if (${Verbosity}) /docommand ${ChatToggle} Attempting to cast ${SpellName} on ${Spawn[${SpellTarget}].CleanName}.
		:recast
		/if (${Debug}) /echo |- Check_LongTermSpell -| Casting [${SpellName}][${CastType}] on [${Spawn[id ${SpellTarget}].CleanName}]. GiveUpTimer=${GiveUpTimer}${If[${Defined[GiveUpValue]},Retries=${GiveUpValue},]}.
		/call e3_Cast ${SpellTarget} "${SpellName}" ${CastType} ${GiveUpTimer}
		
	|---------------------------------------------If the spell was resisted.
		/if (${Select[${castReturn},CAST_RESISTED]}) {
			/if (!${Defined[ResistRetry]}) /declare ResistRetry int local 0
			/if (${Target.ID}) /docommand ${ChatToggle} **Warning** ${Target.CleanName} resisted ${SpellName}.
			/if (${Defined[ResistRetry]}) /varcalc ResistRetry ${ResistRetry}+1
			/if (${ResistRetry}<${GiveUpValue}) /goto :recast
			
	|----------------------------------------------If the target was immune.
		} else /if (${Select[${castReturn},CAST_IMMUNE]}) {
			/call createTimer ${dot_Timer} 35m
			/if (${Target.ID}) /docommand ${ChatToggle} **Warning** ${Target.CleanName} is IMMUNE to ${SpellName}.
			
	|----------------------------------------------If the spell did not take hold.
		} else /if (${Select[${castReturn},CAST_NOHOLD]}) {
			/call createTimer ${dot_Timer} 35m
			
	|---------------------------------------------If the cast was successful.
		} else /if (${Select[${castReturn},CAST_SUCCESS]}) {
			/if (${Verbosity} && ${Target.ID}) /docommand ${ChatToggle} Landed ${SpellName} on ${Target.CleanName}!!.
			/if (${Debug}) /echo |- Check_LongTermSpell -| created timer [${dot_Timer}][${timer_Setting}]
			/call createTimer ${dot_Timer} ${timer_Setting}
		}
	}
	
/if (${Debug}) /echo <== Check_LongTermSpell -|
/RETURN



|------------------------------------|
|- Pauses MQ2Twist while casting.	-|
|------------------------------------|
SUB pauseTwist
/if (${Debug}) /echo |- pauseTwist ==>

	/varset returnTwist 1
	/squelch /twist stop
	/delay 30 !${Me.Casting.ID}
	/delay 5
	
/if (${Debug}) /echo <== pauseTwist -|
/RETURN



|------------------------------------|
|- Unpauses MQ2Twist after casting.	-|
|------------------------------------|
SUB unpauseTwist
/if (${Debug}) /echo |- unpauseTwist ==>

	/varset returnTwist 0
	/squelch /twist start
	
/if (${Debug}) /echo <== unpauseTwist -|
/RETURN



|------------------------------------------------------------------------|
|- Gives popup information about debuffs on connected NetBots screens.	-|
|------------------------------------------------------------------------|
#EVENT PopUp_Resist "#*#**Warning** #1# resisted #2#.#*#"
SUB EVENT_PopUp_Resist(line, Mob, Spell)
/popup ${line}
/RETURN
#EVENT PopUp_Immune "#*#**Warning** #1# is IMMUNE to #2#.#*#"
SUB EVENT_PopUp_Immune(line, Mob, Spell)
/popup ${line}
/RETURN
#EVENT PopUp_LoS "#*#**Warning** I cannot see #1#!#*#"
SUB EVENT_PopUp_LoS(line, Mob)
/popup ${line}
/RETURN
#EVENT PopUp_Landed "#*#Landed #2# on #1#!!.#*#"
SUB EVENT_PopUp_Landed(line, Mob, Spell)
/popup ${line}
/RETURN



|----------------------------------------------------|
|- Interrupets a spell you're currently casting.	-|
|----------------------------------------------------|
|- Sets castReturn to CAST_CANCELLED.				-|
|----------------------------------------------------|
SUB Interrupt
/stopcast
/varset castReturn CAST_CANCELLED
/RETURN



|------------------------------------|
|- Events to check while casting.	-|
|------------------------------------|
SUB Casting_Events
/doevents BeginCast
/doevents Recover
/doevents Fizzle
/doevents Interrupt
/doevents Standing
/doevents FDFail
/doevents OutOfRange
/doevents OutOfMana
/doevents NoLOS
/doevents Resisted2
/doevents Resisted
/doevents Immune
/doevents Stunned
/doevents Collapse
/doevents NoTarget
/doevents NotReady
/doevents NoHold
/doevents PopUp_Resist
/doevents PopUp_Immune
/doevents PopUp_Oom
/doevents PopUp_Range
/doevents PopUp_LoS
/doevents PopUp_Landed
/RETURN



|------------------------------------------------------------------------------------|
|- Sets castReturn to CAST_SUCCESS.													-|
|------------------------------------------------------------------------------------|
|- castReturn begins set as CAST_SUCCESS, until changed by another casting event.	-|
|------------------------------------------------------------------------------------|
#EVENT BeginCast "You begin casting#*#"
SUB EVENT_BeginCast
/varset castReturn CAST_SUCCESS
/RETURN



|----------------------------------------|
|- Sets castReturn to CAST_COLLAPSE.	-|
|----------------------------------------|
#EVENT Collapse "Your gate is too unstable, and collapses.#*#"
SUB EVENT_Collapse
/varset castReturn CAST_COLLAPSE
/varset giveUpTimer 200
/RETURN



|------------------------------------------------------------|
|- Sets castReturn to CAST_RESTART, after you feign death.	-|
|------------------------------------------------------------|
#EVENT FDFail "#1# has fallen to the ground.#*#"
SUB EVENT_FDFail(line, name)
/if (${name.Equal[${Me.Name}]} && ${Defined[castReturn]}) {
  /if (!${Me.Standing}) /stand
  /varset castReturn CAST_RESTART
}
/RETURN



|------------------------------------|
|- Sets castReturn to CAST_FIZZLE.	-|
|------------------------------------|
#EVENT Fizzle "Your spell fizzles#*#"
SUB EVENT_Fizzle
/varset castReturn CAST_FIZZLE
/RETURN



|------------------------------------|
|- Sets castReturn to CAST_IMMUNE.	-|
|------------------------------------|
#EVENT Immune "Your target is immune to changes in its attack speed#*#"
#EVENT Immune "Your target is immune to changes in its run speed#*#"
#EVENT Immune "Your target cannot be mesmerized#*#"
SUB EVENT_Immune
/varset castReturn CAST_IMMUNE
/RETURN



|----------------------------------------|
|- Sets castReturn to CAST_INTERRUPTED.	-|
|----------------------------------------|
#EVENT Interrupt "Your casting has been interrupted#*#"
#EVENT Interrupt "Your spell is interrupted#*#"
SUB EVENT_Interrupt
/if (${castReturn.NotEqual[CAST_CANCELLED]}) /varset castReturn CAST_INTERRUPTED
/RETURN



|----------------------------------------|
|- Sets castReturn to CAST_CANNOTSEE.	-|
|----------------------------------------|
#EVENT NoLOS "You cannot see your target.#*#"
SUB EVENT_NoLOS
/varset castReturn CAST_CANNOTSEE
/RETURN



|----------------------------------------|
|- Sets castReturn to CAST_NOTARGET.	-|
|----------------------------------------|
#EVENT NoTarget "You must first select a target for this spell!#*#"
SUB EVENT_NoTarget
/varset castReturn CAST_NOTARGET
/RETURN



|----------------------------------------|
|- Sets castReturn to CAST_NOTREADY.	-|
|----------------------------------------|
#EVENT NotReady "Spell recast time not yet met.#*#"
SUB EVENT_NotReady
/varset castReturn CAST_NOTREADY
/RETURN



|----------------------------------------|
|- Sets castReturn to CAST_OUTOFMANA.	-|
|----------------------------------------|
#EVENT OutOfMana "Insufficient Mana to cast this spell!#*#"
SUB EVENT_OutOfMana
/varset castReturn CAST_OUTOFMANA
/RETURN



|----------------------------------------|
|- Sets castReturn to CAST_OUTOFRANGE.	-|
|----------------------------------------|
#EVENT OutOfRange "Your target is out of range, get closer!#*#"
SUB EVENT_OutOfRange
/varset castReturn CAST_OUTOFRANGE
/RETURN



|------------------------------------|
|- Sets castReturn to CAST_RECOVER.	-|
|------------------------------------|
#EVENT Recover "You haven't recovered yet...#*#"
#EVENT Recover "Spell recovery time not yet met#*#"
SUB EVENT_Recover
/varset castReturn CAST_RECOVER
/RETURN



|----------------------------------------|
|- Sets castReturn to CAST_RESISTED.	-|
|----------------------------------------|
#EVENT Resisted "Your target resisted the #1# spell#*#"
SUB EVENT_Resisted(line,  name)
/varset castReturn CAST_RESISTED
/RETURN



|----------------------------------------|
|- Sets castReturn to CAST_INTERRUPT.	-|
|----------------------------------------|
#EVENT Standing "You must be standing to cast a spell#*#"
SUB EVENT_Standing
/stand
/varset castReturn CAST_INTERRUPT
/RETURN



|------------------------------------|
|- Sets castReturn to CAST_STUNNED.	-|
|------------------------------------|
#EVENT Stunned "You are stunned#*#"
#EVENT Stunned "You can't cast spells while stunned!#*#"
#EVENT Stunned "You *CANNOT* cast spells, you have been silenced!#*#"
SUB EVENT_Stunned
/if (${Debug}) /echo |- EVENT_Stunned ==>

	/if (${Me.Stunned}) {
	  /delay 3s !${Me.Stunned}
	}
	/varset castReturn CAST_STUNNED

/if (${Debug}) /echo <== EVENT_Stunned -|	
/RETURN



|------------------------------------|
|- Sets castReturn to CAST_NOHOLD.	-|
|------------------------------------|
#EVENT NoHold "You must first target a group member#*#"
#EVENT NoHold "Your spell did not take hold."
#EVENT NoHold "Your spell would not have taken hold#*#"
#EVENT NoHold "Your spell is too powerful for your intended target#*#"
SUB EVENT_NoHold
/varset castReturn CAST_NOHOLD
/RETURN



|------------------------|
|- Currently unused.	-|
|------------------------|
#EVENT Missing_Components "You are missing #1#"
SUB EVENT_Missing_Components(line, missingComponent)
/echo ${missingComponent}
/RETURN



SUB castingSetup
/if (${Debug}) /echo |- castingSetup ==>
	
	/declare castReturn string outer
	/declare castEndTime timer outer
	/declare swapItemBack bool outer FALSE
	/declare itemExchange_Timer timer outer
	/declare altRecast_Timer timer outer
	/declare no_Cast bool outer FALSE
	/declare bad_Spells string outer
	/declare itemRefreshTime float outer
	
| Add Casting File Paths
	/if (!${Ini[e3 File Paths.ini,File Paths,Item Timer Settings].Length}) /call WriteToIni "e3 File Paths.ini,File Paths,Item Timer Settings" "Macro Inis\Item Timers.ini" 1
	/if (!${Ini[e3 File Paths.ini,File Paths,Disc Timer Settings].Length}) /call WriteToIni "e3 File Paths.ini,File Paths,Disc Timer Settings" "Macro Inis\Disc Timers.ini" 1	
	
| Import itemTimers_Ini.
	/if (!${Ini[e3 File Paths.ini,File Paths,Macro Settings File].Length}) {
		/echo ERROR: Could not find designated file path for [Item Timer Settings], please review [e3 File Paths.ini] and restart.
		/endmacro
	} else {
		/declare itemTimers_Ini string outer ${Ini[e3 File Paths.ini,File Paths,Item Timer Settings]}
	}
	
| Import discTimers_Ini.
	/if (!${Ini[e3 File Paths.ini,File Paths,Macro Settings File].Length}) {
		/echo ERROR: Could not find designated file path for [Disc Timer Settings], please review [e3 File Paths.ini] and restart.
		/endmacro
	} else {
		/declare discTimers_Ini string outer ${Ini[e3 File Paths.ini,File Paths,Disc Timer Settings]}
	}
	
| Generate an itemTimers_Ini.
	/if (!${Ini[${itemTimers_Ini},A].Length}) {
		/echo Building [${itemTimers_Ini}], which contains entries to define timers for the items you use.
		/call Build_Alphabetized_Ini "${itemTimers_Ini}"
	}

| Import Casting Settings.
	
	| Default Spellset
	/if (${Ini[${Macro_Ini},Casting,Default Spell Set].Length}) /call IniToVar "${Macro_Ini},Casting,Default Spell Set" Default_SpellSet string outer
	
	| Default Gems
	/declare DefaultGem int outer 9
	/call IniToVar "${Macro_Ini},Casting,Default Spell Gem" DefaultGem int outer
	/if (${DefaultGem}==9 && !${Me.AltAbility[Mnemonic Retention]}) /varset DefaultGem 8

/if (${Debug}) /echo <== castingSetup -|
/RETURN



SUB castingBackgroundEvents
/RETURN



SUB casting_MacroSettings
/if (${Debug}) /echo |- casting_MacroSettings ==>

	/call WriteToIni "${Macro_Ini},Casting,Default Spell Set"
	/call WriteToIni "${Macro_Ini},Casting,Default Spell Gem" ${If[${Me.AltAbility[Mnemonic Retention]},9,8]}

/if (${Debug}) /echo <== casting_MacroSettings -|
/RETURN



SUB casting_CharacterSettings
/RETURN



SUB casting_Aliases
/RETURN